name: Release Binaries

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '2.0.0'

jobs:
  build-and-sign:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Setup signing keys
        env:
          SIGNING_PRIVATE_KEY: ${{ secrets.SIGNING_PRIVATE_KEY }}
          SIGNING_PUBLIC_KEY: ${{ secrets.SIGNING_PRIVATE_KEY }}
        run: |
          mkdir -p keys
          if [ -n "$SIGNING_PRIVATE_KEY" ]; then
            echo "$SIGNING_PRIVATE_KEY" > keys/querybird-private.pem
            echo "$SIGNING_PUBLIC_KEY" > keys/querybird-public.pem
            chmod 600 keys/querybird-private.pem
            echo "Using provided signing keys"
          else
            echo "No signing keys provided, generating new ones"
            bun run scripts/sign-binaries.ts generate-keys
          fi

      - name: Build binaries for all platforms
        env:
          VERSION: ${{ github.event.release.tag_name || github.event.inputs.version }}
        run: |
          # Set version in package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json

          # Build all binaries
          bun run build:binaries

      - name: Sign binaries
        if: env.SIGNING_PRIVATE_KEY != ''
        run: |
          bun run scripts/sign-binaries.ts sign-all

      - name: Create distribution packages
        env:
          VERSION: ${{ github.event.release.tag_name || github.event.inputs.version }}
        run: |
          bun run scripts/create-distribution.ts

      - name: Upload binaries to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            # Individual platform binaries
            dist/binaries/querybird-linux-x64
            dist/binaries/querybird-linux-arm64
            dist/binaries/querybird-darwin-x64
            dist/binaries/querybird-darwin-arm64
            dist/binaries/querybird-windows-x64.exe
            dist/binaries/querybird-windows-arm64.exe
            # Installation and setup scripts
            dist/binaries/install.sh
            dist/binaries/install.ps1
            dist/binaries/setup-postgres.sh
            dist/binaries/setup-postgres.bat
            dist/binaries/services/*
            # Checksums and keys
            dist/binaries/CHECKSUMS.txt
            keys/querybird-public.pem
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: querybird-release-v${{ github.event.inputs.version }}
          path: |
            dist/releases/
            dist/binaries/
            keys/querybird-public.pem

  test-installation:
    needs: build-and-sign
    if: github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: querybird-release-v${{ github.event.inputs.version }}

      - name: Test installation script (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x install.sh
          chmod +x setup-postgres.sh
          ./install.sh --help
          ./setup-postgres.sh --help || echo "Setup script help not available"

      - name: Test installation script (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Get-Content install.ps1 | Select-String "param" | Out-Null
          Get-Content setup-postgres.bat | Select-String "echo" | Out-Null

      - name: Test binary
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            chmod +x querybird-linux-x64
            ./querybird-linux-x64 --help
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            chmod +x querybird-darwin-arm64
            ./querybird-darwin-arm64 --help
          else
            ./querybird-windows-x64.exe --help
          fi
        shell: bash
